{"version":3,"sources":["resources/campDates.js","resources/campAvailability.js","resources/campgroundsResource.js","Availability.jsx","DateList.jsx","App.js","serviceWorker.js","createStore.js","index.js"],"names":["createResource","name","url","actions","fetch","transformResponse","res","body","dates","types","rootReducer","campground_dates","campgrounds","Campground","availability","arrival","departure","available","_","find","date","spotsAvailable","Camp","id","campground","CampgroundName","useSelector","state","items","CampName","display","styled","div","b","connect","dispatch","bindActionCreators","campgroundActions","useEffect","fetchCampgrounds","Fragment","map","a","dateActions","availActions","fetchCampDates","fetchCampAvailabilitys","Container","d","DatesWrap","h3","App","Boolean","window","location","hostname","match","reducer","availabilityReducer","dateReducer","campgroundReducer","configureStore","ReactDOM","render","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3039d06d.chunk.js","sourcesContent":["import { createResource } from 'redux-rest-resource';\n\nconst hostUrl = '/campdata/db.json';\n\nexport const { types, actions, rootReducer } = createResource({\n  name: 'campDates',\n  url: hostUrl,\n  actions: {\n    fetch: {\n      transformResponse: (res) => ({ ...res, body: res.body.dates }),\n    },\n  },\n});\n","import { createResource } from 'redux-rest-resource';\n\nconst hostUrl = '/campdata/db.json';\n\nexport const { types, actions, rootReducer } = createResource({\n  name: 'campAvailability',\n  url: hostUrl,\n  actions: {\n    fetch: {\n      transformResponse: (res) => ({ ...res, body: res.body.campground_dates }),\n    },\n  },\n});\n","import { createResource } from 'redux-rest-resource';\n\nconst hostUrl = '/campdata/reserveCalifornia.json';\n\nexport const { types, actions, rootReducer } = createResource({\n  name: 'campgrounds',\n  url: hostUrl,\n  actions: {\n    fetch: {\n      transformResponse: (res) => ({ ...res, body: res.body.campgrounds }),\n    },\n  },\n});\n","import _ from 'lodash';\nimport React, { useEffect } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { actions as campgroundActions } from './resources/campgroundsResource';\n\nimport styled from 'styled-components';\n\nconst Availability = ({ campgrounds, actions, arrival, departure }) => {\n  useEffect(() => {\n    actions.fetchCampgrounds();\n  }, [actions]);\n  const availability = useSelector((state) => state.availability.items);\n\n  if (!availability || !campgrounds) {\n    return null;\n  }\n  return (\n    <React.Fragment>\n      {availability.map((a) => (\n        <Campground arrival={arrival} departure={departure} availability={a} />\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst Campground = ({ availability, arrival, departure }) => {\n  const available = _.find(availability.dates, { date: `${arrival}_${departure}` });\n  if (!available || available.spotsAvailable <= 0) {\n    return null;\n  }\n  return (\n    <Camp>\n      <CampgroundName id={availability.campground} />\n      <div>{available.spotsAvailable}</div>\n    </Camp>\n  );\n};\n\nconst CampgroundName = ({ id }) => {\n  const campground = useSelector((state) => _.find(state.campgrounds.items, { id }));\n  return <CampName>{campground ? campground.display : id}</CampName>;\n};\n\nconst Camp = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst CampName = styled.b`\n  margin-right: 8px;\n  margin-bottom: 8px;\n`;\n\nexport default connect(\n  // mapStateToProps\n  (state) => ({ campgrounds: state.campgrounds.items }),\n  // mapDispatchToProps\n  (dispatch) => ({\n    actions: bindActionCreators({ ...campgroundActions }, dispatch),\n  })\n)(Availability);\n","import React, { useEffect } from 'react';\nimport { bindActionCreators } from 'redux';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { actions as dateActions } from './resources/campDates';\nimport { actions as availActions } from './resources/campAvailability';\nimport Availability from './Availability';\n\nconst DateList = ({ actions, dates, availability }) => {\n  useEffect(() => {\n    actions.fetchCampDates();\n    actions.fetchCampAvailabilitys();\n  }, [actions]);\n\n  if (!dates) {\n    return null;\n  }\n  return (\n    <Container>\n      {dates.map((d) => (\n        <React.Fragment>\n          <DatesWrap>\n            {d.arrival} to {d.departure}\n          </DatesWrap>\n          <Availability arrival={d.arrival} departure={d.departure} />\n        </React.Fragment>\n      ))}\n    </Container>\n  );\n};\n\nexport default connect(\n  // mapStateToProps\n  (state) => ({ dates: state.dates.items, availability: state.availability.items }),\n  // mapDispatchToProps\n  (dispatch) => ({\n    actions: bindActionCreators({ ...dateActions, ...availActions }, dispatch),\n  })\n)(DateList);\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n`;\n\nconst DatesWrap = styled.h3`\n  display: flex;\n  flex-direction: row;\n`;\n","import React from 'react';\nimport './App.css';\nimport DateList from './DateList';\n\nfunction App() {\n  return <DateList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { rootReducer as dateReducer } from './resources/campDates';\nimport { rootReducer as campgroundReducer } from './resources/campgroundsResource';\nimport { rootReducer as availabilityReducer } from './resources/campAvailability';\nimport { configureStore } from '@reduxjs/toolkit';\n\nconst reducer = { availability: availabilityReducer, dates: dateReducer, campgrounds: campgroundReducer };\nexport default configureStore({ reducer });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './createStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}